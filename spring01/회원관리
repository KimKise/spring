* 회원 리스트 구동 순서
1. Controller에 요청 들어옴
2. Controller는 Service를 호출		//memberService.memberList();
3. Service는 DAO를 호출한 뒤 리턴 		//return memberDao.memberList(); 
4. DAO에서 myBatis 접근			//return sqlSession.selectList("member.memberList");
5. 결국 DB에 접근 한 결과값을 Controller에 List<MemberVO> list = memberService.memberList(); 형태로 담아진다.
6. model.addAttribute("list",list); list를 model에 담아서 포워딩 할 jsp 페이지에 넘겨 준다.
7. jsp에서 <c:forEach var="row" items="${list}"> 형대로 넘어온 list값을 반복문으로 출력

 * 회원 Detail 구동 순서
1. <a href="${path}/member/view.do?userid=${row.userid}">${row.username}</a>	//list.jsp에서 view 컨트롤러에 파라미터를 보냄
2. 컨트롤러에 넘어온 파라미터를 받는다. --view(String userid, Model model)--
3. model.addAttribute("dto",memberService.viewMember(userid));	//model에 한 회원에 대한 리스트를 불러옴
	3.1. 여기서 memberService.viewMember(userid) 
	3.2. Service(Inter) -> ServiceImpl(Class) -> DAO(Inter) -> DAOImple(Class)
	3.3 DAOImpl에서 --return sqlSession.selectOne("member.memberView",userid);-- MyBatis접근
4. view.jsp에서 받아온 model값 dto를 받아옴, 하나의 회원에 대한 정보를 받아오는 것이기 때문에 반복문을 쓸 필요가 없다.

* 회원 등록 구동 순서
1. list.jsp페이지에서 '회원등록' 버튼을 누르면 write.do 컨트롤러로 간다.
2. write.jsp 페이지를 불러옴 
3. write.jsp 페이지에는 form태그(method=post)로 등록할 회원 정보를 채운다.
4. jsp 페이지로 부터 넘어온 값을 --insert(@ModelAttribute MemberVO vo)-- 형태로 Controller에 받아옴.
5. 받아온 정보를 DB에 넘겨준다.  memberService.insertMember(vo);
	5.1. Service -> DAO -> MyBatis접근
	
* 회원 수정 구동 순서
1. view.jsp페이지에서 '수정' 버튼을 누르면 update.do 컨트롤러로 간다.
2. --update(@ModelAttribute MemberVO vo, Model model)-- view에서 보내준 값을 받기 위해 MemberVO vo //값을 담기 위한 Model model
3. 비번 첵크 boolean result=memberService.checkPw(vo.getUserid(), vo.getUserpw());
	3.1. 받아오 vo의 id와 pw 값을 파라미터로 보냄
	3.2. 쭉쭉 받다 DAOImle 클래스에 오면 MyBatis에 접근
	3.3. int count = sqlSession.selectOne("member.checkPw", map); 
		-> 먼저 받아온 id와 pw는 map에 저장해서 MyBatis에 한번에 보낸다. 두 개를 동시에 보낼 수 없기 때문에
		-> checkPw의 sql구문은 select count(*) from tab where 조건 이기 때문에 개수(int)를 리턴
		-> if(count==1) result=true; 결국 조건(아이디의 비번)이 맞으면 true를 return한다.
4. 비번책크가 true면 memberService.updateMember(vo); 받아온 vo값을 update하고 
	redirect:/member/list.do 리스트 컨트롤러로 가서 리스트를 다시 뿌려 준다.
5. 비번책크가 false이면 
	5.1. model.addAttribute("dto", vo); 받아온 값을 그대로 model에 저장하고 다시 원래 페이지로 돌아가 뿌려줌
	5.2. model.addAttribute("message","비밀번호가 일치하지 않습니다."); 비밀번호가 틀렸다는 view 페이지에 message를 띄우기 위해

* 회원 삭제
1. view.jsp페이지에서 '삭제' 버튼을 누르면 delete.do 컨트롤러로 간다.
2. 비번 첵크하고 삭제		//회원 수정 구동순서와 비슷 
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
* 각 기능 메소드, 파라미터 확인
<list>
	1.1. Controller : public String memberList(Model model)		// 뿌려줄 결과 값 list를 담기 위한 model 
				      List<MemberVO> list = memberService.memberList();		
	1.2. Service 	: public List<MemberVO> memberList();		// return 값을 보내줘야 하므로 클래스 타입을 List<MemberVO> //인터페이스 객체를 메소드만 호출
	1.3. ServiceImpl: return memberDao.memberList();			// DAO의 결과값 return
	1.4. DAO		: public List<MemberVO> memberList();		// 뿌려줄 값을 리턴하기 위해 Class 타입을 맞쳐줌
	1.5. DAOImpl	: return sqlSession.selectList("member.memberList");	// sql 결과값을 리턴함.
	1.6. Controller	: model.addAttribute("list",list);			// 모델에 DB로 부터 받아온 값을 저장함
	1.7. JSP		: <c:forEach var="row" items="${list}">		// 반복문으로 넘어온 model 값을 출력
	
<view/detail>
	2.1. jsp		: view.do?userid=${row.userid}"				// get방식으로 userid를 Controller에 보낸다.
	2.2. Controller	: public String view(String userid, Model model) // 넘어온 userid값을 받고, 한 회원에 대한 정보를 뿌려줄 model를 생성
		 			  model.addAttribute("dto",memberService.viewMember(userid)); //userid에 해당하는 값을 model "dto"변수에 저장
	2.3. Service	: public MemberVO viewMember(String userid);// 이 메소드가 호출 되면 상속된 Class의 구현을 찾아감
	2.4. ServiceImpl: return memberDao.viewMember(userid);		// DAO를 호출하고 그 결과 값을 return함
	2.5. DAO		: public MemberVO viewMember(String userid);// method가 호출되면 상속된 Class를 찾아가 method의 구현을 한다.
	2.6. DAOImpl	: return sqlSession.selectOne("member.memberView",userid);  //MyBatis에 접근하여 결과값을 return 함
	2.7. Controller : model.addAttribute("dto",memberService.viewMember(userid)); // 결과값을 model에 저장한다.
					  
<write>
	3.1. list.jsp	: onclick="location.href='${path}/member/write.do' // 버튼을 클릭하면 write.do 컨트롤러로 간다.
	3.2. Controller : return "member/write";					// write.jsp 페이지로 간다.
	3.3. write.jsp	: <form method="post" action="_/insert.do">	// 입력한 input값들은 form(POST방식)으로 insert.do 컨트롤러로 간다.
	3.4. Contoller	: public String insert(@ModelAttribute MemberVO vo) // 넘어온 form의 값을 memberVO타입으로 받는다.
					  memberService.insertMember(vo);			// DB에 입력시킬 vo를 넘겨줌
	3.5. Service	: public void insertMember(MemberVO vo); 	// 이 method가 호출되면 상속된 Class를 찾아가 method의 구현을 한다.
	3.6. ServiceImpl: public void insertMember(MemberVO vo)		// vo를 받아온 뒤
					  memberDao.insertMember(vo);				// vo를 Dao에 넘겨준다.
	3.7. DAO		: public void insertMember(MemberVO vo);	// 이 method가 호출되면 상속된 Class를 찾아가 method의 구현을 한다.
	3.8. DAOImpl	: public void insertMember(MemberVO vo)		// 받아온 vo값을 
					  sqlSession.insert("member.memberInsert",vo); // 받아온 vo값을 MyBatis로 넘겨 sql구문을 실행시킨다. Insert 성공!!
	3.9. Controller	: return "redirect:/member/list.do";		// list.do 컨트롤러로 가서 list.jsp를 다시 뿌려줌

<checkPw>
	4.1. view.jsp	: form(POST방식)으로 데이터 값을 컨트롤러로 넘겨줌 
	4.2. Controller	: public String update(@ModelAttribute MemberVO vo, Model model) // form의 데이터값을 vo변수에 받음
				boolean result=memberService.checkPw(vo.getUserid(), vo.getUserpw()); //vo변수의 id와 pw값을 넘겨줌
	4.3. Service	: public boolean checkPw(String userid, String userpw); // boolean 값으로 리턴 받음
	4.4. ServiceImpl: public boolean checkPw(String userid, String userpw)	// id와 pw값을 받아오고 
					  return memberDao.checkPw(userid, userpw);	// 받아온 값을 DAO에 넘겨준가. 그리고 그 결과값을 리턴한다.
	4.5. DAO		: public boolean checkPw(String userid, String userpw);
	4.6. DAOImpl	: map.put("userid", userid); map.put("userpw", userpw); //map에 넘어온 id와 pw값을 넣어준다. MyBatis에 두개의 변수를 못 넘기기 때문에
					  int count = sqlSession.selectOne("member.checkPw", map); // MyBatis의 sql 구문을 count로 해서 id에 해당하는 비번이 맞으면 1이 리턴
					  if(count==1) result=true;					// count가 1면 true값 리턴
	4.7. Contoller : if(result){memberService.updateMember(vo);	// true면 업데이트 시키고
								return "redirect:/member/list.do";} // list.do 컨트롤로 가서 list.jsp를 다시 뿌려줌
					else{model.addAttribute("dto", vo);			// false이면 model에 vo값을 dto에 넣는다. 다시 뿌려주기위해
					model.addAttribute("message","비밀번호가 일치하지 않습니다."); // message 출력을 위해 
					return "member/view";}
			
		


	